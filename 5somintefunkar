import numpy as np
from sklearn.preprocessing import normalize


def normalized(a, axis=-1, order=2):
    l2 = np.atleast_1d(np.linalg.norm(a, order, axis))
    l2[l2 == 0] = 1
    return a / np.expand_dims(l2, axis)


def big(x):
    fac = abs(x).max()
    x_n = x / x.max()
    return fac, x_n


def r_quote(b, A):
    bt = normalized(b, 0)
    btt = np.transpose(bt)

    RK1 = np.dot(btt, A)
    RK2 = np.dot(RK1, bt)
    return RK2


def potens(b, A):
    b = np.dot(A, b)
    lambda_1, b = big(b)
    return b


def main():
    b = np.array([1, 1])
    A = np.matrix("0, 2; 2, 3")
    RK = r_quote(b, A)
    RK2 = 0
    i = 0
    while abs(RK - RK2) > 10 ** -6:
        b = potens(b, A)
        RK2 = r_quote(b, A)
        i += 1
        print(b)

    print(i)


if __name__ == "__main__":
    main()
